/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type UserIdVoucherStruct = {
  uri: PromiseOrValue<string>;
  userId: PromiseOrValue<BytesLike>;
  fingerPrint: PromiseOrValue<BytesLike>;
  signature: PromiseOrValue<BytesLike>;
};

export type UserIdVoucherStructOutput = [string, string, string, string] & {
  uri: string;
  userId: string;
  fingerPrint: string;
  signature: string;
};

export interface IUserIdentityNFTInterface extends utils.Interface {
  functions: {
    "createSingleNFT((string,bytes,bytes,bytes))": FunctionFragment;
    "redeem((string,bytes,bytes,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createSingleNFT" | "redeem"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSingleNFT",
    values: [UserIdVoucherStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [UserIdVoucherStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSingleNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;

  events: {
    "MintNft(address,uint256)": EventFragment;
    "Redeem(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MintNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
}

export interface MintNftEventObject {
  userAddres: string;
  tokenId: BigNumber;
}
export type MintNftEvent = TypedEvent<[string, BigNumber], MintNftEventObject>;

export type MintNftEventFilter = TypedEventFilter<MintNftEvent>;

export interface RedeemEventObject {
  userAddres: string;
}
export type RedeemEvent = TypedEvent<[string], RedeemEventObject>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface IUserIdentityNFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUserIdentityNFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSingleNFT(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      voucher: UserIdVoucherStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createSingleNFT(
    voucher: UserIdVoucherStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    voucher: UserIdVoucherStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createSingleNFT(
      voucher: UserIdVoucherStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      voucher: UserIdVoucherStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MintNft(address,uint256)"(
      userAddres?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintNftEventFilter;
    MintNft(
      userAddres?: null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): MintNftEventFilter;

    "Redeem(address)"(userAddres?: null): RedeemEventFilter;
    Redeem(userAddres?: null): RedeemEventFilter;
  };

  estimateGas: {
    createSingleNFT(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      voucher: UserIdVoucherStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSingleNFT(
      voucher: UserIdVoucherStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      voucher: UserIdVoucherStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
